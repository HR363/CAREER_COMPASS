// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile        Profile?
  recommendations Recommendation[]
  resources      Resource[]
  mentorSessions Session[] @relation("MentorSessions")
  studentSessions Session[] @relation("StudentSessions")

  @@map("users")
}

model Profile {
  id         String   @id @default(cuid())
  userId     String   @unique
  education  String?
  skills     String?  // JSON string
  interests  String?  // JSON string
  goals      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Recommendation {
  id            String   @id @default(cuid())
  userId        String
  suggestedCareers String? // JSON string
  learningPath  String?    // JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

model Resource {
  id        String   @id @default(cuid())
  mentorId  String
  title     String
  link      String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  mentor User @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@map("resources")
}

model Session {
  id          String        @id @default(cuid())
  mentorId    String
  studentId   String
  scheduledAt DateTime
  status      SessionStatus @default(SCHEDULED)
  roomId      String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  mentor  User @relation("MentorSessions", fields: [mentorId], references: [id], onDelete: Cascade)
  student User @relation("StudentSessions", fields: [studentId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  MENTOR
  STUDENT
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
